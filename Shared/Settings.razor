@using Microsoft.AspNetCore.Components
@inject IJSRuntime JS

<div class="settings-modal" style="background: white; padding: 1rem; border-radius: .5rem; box-shadow: 0 2px 10px rgba(0,0,0,0.2);">
  <h3>Settings</h3>
  <div>
    <label>Focus duration (mins):</label>
    <input type="number" @bind="focus" min="1" />
  </div>
  <div>
    <label>Short break (mins):</label>
    <input type="number" @bind="shortBreak" min="1" />
  </div>
  <div>
    <label>Long break (mins):</label>
    <input type="number" @bind="longBreak" min="1" />
  </div>
  <button @onclick="Save">Save</button>
  <button @onclick="Close">Cancel</button>
</div>

@code {
  [Parameter] public EventCallback<Dictionary<string,int>> OnSave { get; set; }
  [Parameter] public EventCallback OnCancel { get; set; }

  private int focus;
  private int shortBreak;
  private int longBreak;

  protected override async Task OnInitializedAsync() {
    var fx = await JS.InvokeAsync<string>("localStorage.getItem", "focusDuration");
    var sb = await JS.InvokeAsync<string>("localStorage.getItem", "shortDuration");
    var lb = await JS.InvokeAsync<string>("localStorage.getItem", "longDuration");
    focus = int.TryParse(fx, out var v1) ? v1 : 25;
    shortBreak = int.TryParse(sb, out var v2) ? v2 : 5;
    longBreak = int.TryParse(lb, out var v3) ? v3 : 15;
  }

  async Task Save() {
    await JS.InvokeVoidAsync("localStorage.setItem", "focusDuration", focus.ToString());
    await JS.InvokeVoidAsync("localStorage.setItem", "shortDuration", shortBreak.ToString());
    await JS.InvokeVoidAsync("localStorage.setItem", "longDuration", longBreak.ToString());
    var dict = new Dictionary<string,int> {
      ["Focus"] = focus, ["Short Break"] = shortBreak, ["Long Break"] = longBreak
    };
    await OnSave.InvokeAsync(dict);
  }

  Task Close() => OnCancel.InvokeAsync();
}
